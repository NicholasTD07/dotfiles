"""
# Generate config for Karabiner

which disables combination of shift (left or right) and another key on the same side.
Layout based on Kinesis Advantage

Q: Why there is ~~no~~ disabling left or right control?
A: Because you can map option_L to control_L in karabiner

## Ideas

Add different layers for different languages, for example

- `m` for Markdown, and 12345 maps to # * n
- `s` for Swift, `f` for `func` and `l` for `let`
- `p` for Python, `d` for `def` and `m` for `if __name__ == '__main__':`
"""

def main():
    shift_L = "SHIFT_L"
    shift_R = "SHIFT_R"

    control_L = "control_L".upper()
    control_R = "control_R".upper()

    chars_on_dvorak_left = """
    =12345
    ',.py
    aoeui
    ;qjkx
    `
    """

    chars_on_dvorak_right = r"""
    67890-
    fgcrl/
    dhtns\
    bmwvz
    []
    """

    keycodes_on_dvorak_left = char_list_to_keycodes(
        chars_to_list(
            chars_on_dvorak_left
        )
    )

    keycodes_on_dvorak_right = char_list_to_keycodes(
        chars_to_list(
            chars_on_dvorak_right
        )
    )

    disable_left_shift_with_left_side_keys = map(
        lambda keycode: disable(keycode, shift_L),
        keycodes_on_dvorak_left
    )

    disable_right_shift_with_right_side_keys = map(
        lambda keycode: disable(keycode, shift_R),
        keycodes_on_dvorak_right
    )

    disable_left_control = map(
        lambda keycode: disable(keycode, control_L),
        keycodes_on_dvorak_left
    )

    disable_right_control = map(
        lambda keycode: disable(keycode, control_R),
        keycodes_on_dvorak_right
    )

    diabled_keycodes = (
        disable_left_shift_with_left_side_keys
        + disable_right_shift_with_right_side_keys
        + disable_left_control
        + disable_right_control
    )

    print("<!-- AUTOGENERATED BEGIN -->")
    for d in diabled_keycodes:
        print(d)
    print("<!-- AUTOGENERATED END -->")


def char_list_to_keycodes(char_list):
    def map_to_keycode(char):
        if char.isalpha():
            return map_char_to_keycode(char)
        elif char.isdigit():
            return "KEY_{}".format(char)
        else:
            return map_symbol_to_keycode(char)

    return map(map_to_keycode, char_list)

def chars_to_list(chars):
    return list(chars.replace('\n', '').replace(' ', ''))

def map_symbol_to_keycode(symbol):
    # source: https://github.com/tekezo/Karabiner/blob/version_10.22.0/src/bridge/generator/keycode/data/KeyCode.data
    symbol_map_with_whitespace = {
        "`": "BACKQUOTE    ",
        "\\": "BACKSLASH    ",
        '[': "BRACKET_LEFT ",
        ']': "BRACKET_RIGHT",
        ',': "COMMA        ",
        '.': "DOT          ",
        '=': "EQUAL        ",
        '-': "MINUS        ",
        "'": "QUOTE        ",
        ';': "SEMICOLON    ",
        '/': "SLASH        ",
    }
    symbol_map = { k: v.strip() for (k, v) in symbol_map_with_whitespace.items() }

    return symbol_map[symbol]

def map_char_to_keycode(char):
    return char.upper()

def disable(key, modifer):
    identifier = "disable.{}-{}".format(modifer, key)
    name = "Disable {}-{}".format(modifer, key)
    disable_format = """
    <item>
        <identifier>{identifier}</identifier>
        <name>{name}</name>
        <autogen>
            __KeyToKey__
            KeyCode::{key}, ModifierFlag::{modifier},
            KeyCode::VK_NONE,
        </autogen>
    </item>
    """

    return disable_format.format(
        identifier=identifier,
        name=name,
        key=key,
        modifier=modifer
    )

if __name__ == '__main__':
    main()
