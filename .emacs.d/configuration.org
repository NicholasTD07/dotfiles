#+TITLE: Emacs Configuration

* Settings
** Basic

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000) ; Do GC when every 100MB are allocated
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) ; Don't indent with tabs.
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+END_SRC

** UI

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore
#+END_SRC

#+BEGIN_SRC emacs-lisp
  inhibit-startup-screen t ; Skip the startup screen
#+END_SRC

#+BEGIN_SRC emacs-lisp
  initial-scratch-message "; Hello there!\n; Happy hacking!\n")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p #'y-or-n-p) ; Change yes/no -> y/n
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (fset 'display-startup-echo-area-message #'ignore) ; No more startup message
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) ; Hide menu bar at top
#+END_SRC

* Package management
** Always install all the packages

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t
        use-package-verbose t)
#+END_SRC

** Use :diminish with use-package

To remove or abbreviate a mode indicator in the modeline

#+BEGIN_SRC emacs-lisp
  (require 'diminish)
#+END_SRC

** Use :bind-key with use-package

To bind keys easily in a tidy way

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
#+END_SRC

** Asynchronous compilation

#+BEGIN_SRC emacs-lisp
  (use-package async
    :init (setq async-bytecomp-allowed-packages '(all))
    :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (dired-async-mode 1) ; Enable aysnc commands for directory editor, also for helm
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (async-bytecomp-package-mode 1) ; See https://github.com/jwiegley/emacs-async for explanation
  )
#+END_SRC

** UI

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config (powerline-default-theme))
#+END_SRC

*** airline

#+BEGIN_SRC emacs-lisp
  (use-package airline-themes
    :after powerline
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :init (setq powerline-utf-8-separator-left        #xe0b0
              powerline-utf-8-separator-right       #xe0b2
              airline-utf-glyph-separator-left      #xe0b0
              airline-utf-glyph-separator-right     #xe0b2
              airline-utf-glyph-subseparator-left   #xe0b1
              airline-utf-glyph-subseparator-right  #xe0b3
              airline-utf-glyph-branch              #xe0a0
              airline-utf-glyph-readonly            #xe0a2
              airline-utf-glyph-linenumber          #xe0a1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config (load-theme 'airline-light t))
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp
  (use-package whitespace ; Built-in
    :diminish (whitespace-mode global-whitespace-mode)
    :init (setq whitespace-style '(face tabs trailing empty tab-mark))
    :config (global-whitespace-mode))
#+END_SRC

** Keys

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq guide-key/guide-key-sequence t ; Enable guide-key for all key sequences
#+END_SRC

#+BEGIN_SRC emacs-lisp
  guide-key/popup-window-position 'bottom)
  (guide-key-mode)) ; Enable guide-key-mode
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package general
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq general-default-keymaps '(evil-normal-state-map
                                  evil-visual-state-map
                                  evil-operator-state-map)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  general-default-prefix "<SPC>")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config

  (general-define-key "rb" 'eval-buffer)
  (general-define-key "rr" 'eval-region)

  (general-define-key "w" 'save-buffer)
  (general-define-key "0" 'delete-other-windows)
  (general-define-key "qq" 'save-buffers-kill-terminal)

  (general-define-key "hk" 'describe-key)
  (general-define-key "hf" 'describe-function)
  (general-define-key "hv" 'describe-variable)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun dot-emacs/copy-to-clipboard ()
    (interactive)
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "pbcopy")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))

  (general-define-key "y" 'dot-emacs/copy-to-clipboard)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun dot-emacs/paste-from-clipboard ()
    (interactive)
    (insert (shell-command-to-string "pbpaste")))

  (general-define-key "p" 'dot-emacs/paste-from-clipboard)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun dot-emacs/edit (filename)
    (find-file (concat user-emacs-directory filename)))

  (defun dot-emacs/edit-configuration ()
    (interactive)
    (dot-emacs/edit "configuration.org"))

  (general-define-key "ee" 'dot-emacs/edit-configuration))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package time ; Built-in
    :diminish display-time-mode
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (general-define-key "it" 'display-time-world)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list '(
                                  ("Australia/Sydney" "Sydney")
                                  ("Asia/Chongqing" "Chongqing")
                                  ("PST8PDT" "San Francisco")
                                  ("Asia/Calcutta" "Bangalore")
                                  ("Australia/Melbourne" "Melbourne")
                                  ("Europe/London" "London")
                                  ("Europe/Paris" "Paris")
                                  ("Asia/Tokyo" "Tokyo")
                                  ("America/Los_Angeles" "Los Angeles")
                                  ("America/New_York" "New York")
                                  ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config (display-time-mode))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :commands (org-agenda
               org-capture
               org-store-link
               org-iswitchb)
    :init
    (setq org-ellipsis "â¤µ")
    (setq org-src-tab-acts-natively t)
    (setq org-log-done 'time)

    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

    (setq org-directory "~/Dropbox/data/org/")

    (defun org-file-path (filename)
      "Return the absolute address of an org file, given its relative name."
      (concat (file-name-as-directory org-directory) filename))

    (setq org-default-notes-file (org-file-path "notes.org"))
    (setq org-agenda-files (list org-default-notes-file))
    (setq org-archive-location
          (concat (org-file-path "archive.org") "::* From %s"))

    (general-define-key "oa" 'org-agenda)
    (general-define-key "oc" 'org-capture)
    (general-define-key "ol" 'org-store-link)
    (general-define-key "ob" 'org-iswitchb)

    (general-define-key "on" '(lambda ()
                                (interactive)
                                (find-file org-default-notes-file)))

    (defun evil-org-eol-call (fun &rest arguments)
      "Go to end of line and call provided function.
  FUN function callback
  Optional argument ARGUMENTS arguments to pass to FUN."
      (end-of-visible-line)
      (apply fun arguments)
      (evil-insert nil))

    (general-define-key :prefix nil
                        :keymaps 'org-mode-map
                        :states '(normal)
                        "tt" 'org-set-tags
                        "ti" (lambda ()
                               (interactive)
                               (evil-org-eol-call
                                #'org-insert-todo-heading-respect-content)))
    :config
    (dolist (item '(("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
                    ("re" "#+END_SRC\n?\n#+BEGIN_SRC emacs-lisp")))
      (add-to-list 'org-structure-template-alist item))

    (add-hook 'org-mode-hook (lambda () (org-indent-mode t)))

    (add-hook 'org-capture-mode-hook 'evil-insert-state)

    (eval-after-load 'org-indent '(diminish 'org-indent-mode)))
#+END_SRC

** Evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t ; Enable <c-u> to scroll up
#+END_SRC

#+BEGIN_SRC emacs-lisp
  evil-want-C-i-jump nil ; Disable C-i & TAB for jumps forward (conflicting with evil-org's TAB)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  evil-regexp-search t ; Enable regexp search
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map ";" #'evil-ex)
  (define-key evil-normal-state-map ":" #'evil-repeat-find-char)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (evil-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :diminish evil-escape-mode
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :init (setq-default evil-escape-key-sequence "kj")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config
  (evil-escape-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after evil
    :config (evil-magit-init))

  (use-package evil-easymotion
    :after evil
    :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
                                          ; Evil-easymotion's line movements work perfectly with evil.
  (general-define-key "j" (evilem-create 'evil-next-line))
  (general-define-key "k" (evilem-create 'evil-previous-line)))
#+END_SRC


; Avy's line movements do not work with evil too well
; For example, when in visual line selection mode (V), avy does not work at all;
; and when it does work in visual selection mode (v), it selects the line before selection.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :commands (avy-goto-char-2 avy-goto-line-above avy-goto-line-below)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :bind (
         :map evil-normal-state-map
              ("f" . avy-goto-char-2)
              :map evil-visual-state-map
              ("f" . avy-goto-char-2)
              :map evil-operator-state-map
              ("f" . avy-goto-char-2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq avy-background t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq avy-keys '(?a ?e ?i ?o ?u ?h ?t ?d ?s)))
#+END_SRC

** Languages

#+BEGIN_SRC emacs-lisp
  (use-package swift-mode
    :mode "\\.swift\\'"
    :interpreter "swift"
    :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (general-define-key :prefix nil
                      :keymaps 'swift-mode-map
                      :states '(insert emacs)
                      ";" '(lambda () (interactive) (insert ":"))
                      ":" '(lambda () (interactive) (insert ";")))

                                          ; The following two lines are kept here for comparison reasons.
                                          ; Seems much easier to use define-key.

                                          ;(define-key swift-mode-map (kbd ";") '(lambda () (interactive) (insert ":")))
                                          ;(define-key swift-mode-map (kbd ":") '(lambda () (interactive) (insert ";")))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode ; Built-in
    :mode ("\\.rb\\'" "\\Brewfile\\'"))

  (use-package fish-mode
    :mode "\\.fish\\'")
#+END_SRC

** Functionality

*** evil org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after (org evil)
    :diminish (evil-org-mode)
    :mode ("\\.org\\'" . org-mode)
    :config
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional)))))
#+END_SRC

*** flx

#+BEGIN_SRC emacs-lisp
  (use-package flx)
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq projectile-enable-caching t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq projectile-switch-project-action 'helm-ls-git-ls)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config
  (projectile-discover-projects-in-directory "~/work")
  (projectile-discover-projects-in-directory "~/proj")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode))
#+END_SRC

*** projectile-ripgrep

#+BEGIN_SRC emacs-lisp
  (use-package projectile-ripgrep
    :after (projectile)
    :commands (projectile-ripgrep))
#+END_SRC

*** Other

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :diminish auto-revert-mode
    :commands magit-status
    :init
    (general-define-key "s" 'magit-status))

  (use-package ggtags
    :commands (ggtags-update-tags))

  (use-package auto-complete
    :diminish auto-complete-mode
    :config
    (ac-config-default))

  (use-package smartparens
    :diminish smartparens-mode
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode)
    (smartparens-global-mode))

  (use-package slack
    :commands (slack-start)
    :init
    (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
    (setq slack-prefer-current-team t))

  (use-package alert
    :commands (alert)
    :init
    (setq alert-default-style 'notifier))
#+END_SRC

** Helm

*** helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :demand t
    :diminish helm-mode
    :bind ("M-x" . helm-M-x)
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq helm-mode-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-match t
        helm-candidate-number-limit 20)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (general-define-key "<SPC>" 'helm-M-x)
  (general-define-key "b" 'helm-buffers-list)
  :config
  (helm-mode))
#+END_SRC

*** helm-flx

#+BEGIN_SRC emacs-lisp
  (use-package helm-flx
    :after (helm flx)
    :init
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq helm-flx-for-helm-find-files t
        helm-flx-for-helm-locate t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :config (helm-flx-mode))
#+END_SRC

*** helm-projectile

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :after (helm helm-flx)
    :commands (helm-projectile-switch-project)
    :config
    (general-define-key "c" 'helm-projectile-switch-project))
#+END_SRC

*** helm-ls-git

#+BEGIN_SRC emacs-lisp
  (use-package helm-ls-git
    :commands helm-ls-git-ls
    :init
                                          ;(setq helm-ls-git-fuzzy-match t)
    (general-define-key "f" 'helm-ls-git-ls))

#+END_SRC

*** helm-gtags

#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :commands (helm-gtags-select
               helm-gtags-find-rtag
               helm-gtags-parse-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  :init
  (setq helm-gtags-fuzzy-match t)

  (general-define-key :prefix nil
                      :keymaps '(swift-mode-map)
                      :states '(normal)
                      "t" 'helm-gtags-select
                      "r" 'helm-gtags-find-rtag)

  (general-define-key "t" 'helm-gtags-parse-file))
#+END_SRC
