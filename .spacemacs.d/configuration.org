#+TITLE: Spacemacs Configuration

* Toggles

** auto-fill-mode

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-auto-fill-mode-on)
   #+END_SRC
** golden-ratio

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-golden-ratio-on)
   #+END_SRC
** centered-cursor

   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-centered-point-globally-on)
   #+END_SRC

* Functions
** Edit Spacemacs's configuration
   #+BEGIN_SRC emacs-lisp
     (defun td/edit (filename)
       (find-file (concat dotspacemacs-directory filename)))

     (defun td/edit-configuration ()
       (interactive)
       ;(td/edit "configuration.emacs.org")
       (td/edit "configuration.org"))
   #+END_SRC
** Dedicate a window's purpose

   #+BEGIN_SRC emacs-lisp
     (defun td/dedicate-window-purpose ()
       (interactive)
       (purpose-set-window-purpose-dedicated-p nil t))
   #+END_SRC

* Packages

** alert

   #+BEGIN_SRC emacs-lisp
     (setq alert-default-style 'notifier)
   #+END_SRC

** avy

   #+BEGIN_SRC emacs-lisp
     (setq avy-keys '(?a ?e ?i ?o ?u ?h ?t ?d ?s ?y))
   #+END_SRC

** company

*** Enable company globally

    #+BEGIN_SRC emacs-lisp
      (global-company-mode)
    #+END_SRC

*** Use Tab and Go

    #+BEGIN_SRC emacs-lisp
      (company-tng-configure-default)
    #+END_SRC

*** Enable company in text mode too

    #+BEGIN_SRC emacs-lisp
      (spacemacs|add-company-backends
        :backends company-capf
        :modes text-mode)
    #+END_SRC

*** Enable company in swift mode too

    #+BEGIN_SRC emacs-lisp
      (spacemacs|add-company-backends
        :backends company-capf
        :modes swift-mode)
    #+END_SRC

*** Fuzzy autocompletion

    #+BEGIN_SRC emacs-lisp
      (setq company-flx-limit 100)
      (company-flx-mode)
    #+END_SRC

** helm

*** Notes

    - SPC / for search and replace, in many files!

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-mode-fuzzy-match t
            helm-completion-in-region-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-buffers-fuzzy-matching t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq helm-candidate-number-limit 20)
    #+END_SRC
*** ripgrep

    Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
      (setq helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'"))
    #+END_SRC

** helm-ls-git

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "ff" 'helm-ls-git-ls)
   #+END_SRC

** magit

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "gg" 'magit-status)
   #+END_SRC

** org

   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'org
   #+END_SRC

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq org-ellipsis "â¤µ")

      (setq org-M-RET-may-split-line nil)

      (setq org-directory "~/Dropbox/data/org/")

      (defun org-file-path (filename)
        (concat (file-name-as-directory org-directory) filename))

      (defun org-file-path-or-nil (filename)
        "Return the absolute address of an org file, given its relative name."
        (let ((file-path (org-file-path filename)))
          (if (file-exists-p file-path)
              file-path nil)))

      (setq org-default-notes-file (org-file-path "notes.org"))
      (setq org-agenda-files (cl-remove-if #'null (list org-directory
                                                        (org-file-path-or-nil "work/"))))
      (setq org-archive-location (format "%s::"
            (org-file-path "archive.org")))
    #+END_SRC

*** Add structure templates

    #+BEGIN_SRC emacs-lisp
      (dolist (item '(("e" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
                      ("s" "#+BEGIN_SRC swift\n?\n#+END_SRC")
                      ("sh" "#+BEGIN_SRC sh :results raw\n?\n#+END_SRC")
                      ("ss" "#+BEGIN_SRC ?\n\n#+END_SRC")
                      ("p" "#+BEGIN_SRC python :results output\n?\n#+END_SRC")))
        (add-to-list 'org-structure-template-alist item))
    #+END_SRC

*** Turn on =auto-fill-mode= for =org-mode=
    
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'spacemacs/toggle-auto-fill-mode-on)
    #+END_SRC

*** Babel

    #+BEGIN_SRC emacs-lisp
      (setq org-babel-python-command "/usr/local/bin/python3")
    #+END_SRC

**** Don't prompt me to confirm every time I want to evaluate a block.

     #+BEGIN_SRC emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+END_SRC

**** =org-babel-execute:swift=

     #+BEGIN_SRC emacs-lisp
       (defun org-babel-execute:swift (body params)
         "Execute a block of Swift code with org-babel."
         (message "executing Swift source code block")
         (ob-swift--eval body))

       (defun ob-swift--eval (body)
         (with-temp-buffer
           (insert body)
           (shell-command-on-region (point-min) (point-max) "swift -" nil 't)
           (buffer-string)))

       (provide 'ob-swift)
     #+END_SRC

**** =org-babel-do-load-languages=
     Load languages

     #+BEGIN_SRC emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '(
          (swift . t)
          (python . t)
          (ruby . t)

          (shell . t)
          ))
     #+END_SRC

** projectile
*** =*scratch*= buffer per project

    #+BEGIN_SRC emacs-lisp
      (defun switch-to-project-s-scratch-buffer ()
        (interactive)
        (let ((buffer-name (format "*scratch: %S*" (projectile-project-name))))
          (if-let (buffer (get-buffer buffer-name)) ; buffer exists
              (switch-to-buffer buffer)
            (progn                            ; buffer does not exist
              (switch-to-buffer (get-buffer-create buffer-name))
              (org-mode)
              (insert (format "#+TITLE %S\n\n" (projectile-project-name)))))))
    #+END_SRC
*** =zen=

    #+BEGIN_SRC emacs-lisp
      (defun zen ()
        (interactive)
        (progn
          (delete-other-windows)
          (switch-to-project-s-scratch-buffer)
          (td/dedicate-window-purpose)))
    #+END_SRC

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq projectile-enable-caching t)
      (setq projectile-switch-project-action 'zen)

      (setq projectile-tags-backend 'etag-select)
    #+END_SRC

*** Discover projects

    #+BEGIN_SRC emacs-lisp
      (projectile-discover-projects-in-directory "~/work")
      (projectile-discover-projects-in-directory "~/proj")
    #+END_SRC

** purpose

   #+BEGIN_SRC emacs-lisp
     (setq purpose-user-mode-purposes '((magit-mode . magit)
                                        (slack-mode . slack)))
     (setq purpose-user-regexp-purposes '(
                                          ;("^*scratch: [\"a-zA-Z0-9]" . edit)
                                          ))

     (purpose-compile-user-configuration)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'magit-mode-setup-hook 'td/dedicate-window-purpose)
   #+END_SRC
* Key bindings
** =TAB= to toggle fold

   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "TAB") 'evil-toggle-fold)
   #+END_SRC

** =;= <-> =:= in every modes

   #+BEGIN_SRC emacs-lisp
     (global-set-key ":" (lambda () (interactive) (insert ";")))
     (global-set-key ";" (lambda () (interactive) (insert ":")))
   #+END_SRC

** =SPC fee= to edit configurations

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "fee" 'td/edit-configuration)
   #+END_SRC

** =SPC [0-9]=

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "0" 'delete-other-windows)
     (spacemacs/set-leader-keys "7" 'async-shell-command)
     (spacemacs/set-leader-keys "9" 'zen)
   #+END_SRC

** =SPC oo= to edit =org-default-notes-file=

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "oo" '(lambda ()
                                        (interactive)
                                        (find-file org-default-notes-file)))
   #+END_SRC

** =f= and =t=

   #+BEGIN_SRC emacs-lisp
     (define-key evil-normal-state-map "f" 'evil-avy-goto-char-2)
     (define-key evil-visual-state-map "f" 'evil-avy-goto-char-in-line)

     (defun evil-avy-find-char-to-in-line ()
       "Somehow this magically makes `evil-avy-goto-char' works as `evil-find-char-to'"
       (interactive)
       (evil-avy-goto-char-in-line))

     (define-key evil-visual-state-map "t" 'evil-avy-find-char-to-in-line)
     (define-key evil-operator-state-map "t" 'evil-avy-find-char-to-in-line)
   #+END_SRC

** =SPC jj= and =SPC jk=

   #+BEGIN_SRC emacs-lisp

     (evil-define-avy-motion avy-goto-line-above line)
     (evil-define-avy-motion avy-goto-line-below line)

     (spacemacs/set-leader-keys
       "jj" 'evil-avy-goto-line-below
       "jk" 'evil-avy-goto-line-above)
   #+END_SRC
** =SPC gc= and =SPC gC=

   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys
       "gc" 'magit-commit
       "gC" 'magit-clone)
   #+END_SRC

* TODOs
** ace-jump-line-mode render marks on the same column as the cursor
** layout with purpose
*** Ref: https://emacs.stackexchange.com/questions/9995/set-windows-layout-by-a-function
*** Save a window layout (say, code + git) with purpose and copy it into emacs's config
*** Set =dedicated= to =t=
*** When switching project, load that config and open the buffers (and let purpose do its work)
** alert
*** compilation finish
*** git push finish
** SPC gc should do magit commit
   SPC gC should be magit clone

