#+TITLE: Spacemacs Configuration

* Toggles
** golden-ratio
   #+BEGIN_SRC emacs-lisp
     (spacemacs/toggle-golden-ratio-on)
   #+END_SRC
* Functions
** Edit Spacemacs's configuration
   #+BEGIN_SRC emacs-lisp
     (defun td/edit (filename)
       (find-file (concat dotspacemacs-directory filename)))

     (defun td/edit-configuration ()
       (interactive)
       (td/edit "configuration.emacs.org")
       (td/edit "configuration.org"))

     (defun td/day-of-week ()
       "Returns the day of week, an integer between 0 and 6, where 0 is
     Sunday."
       (nth 6 (decode-time)))

     (defun td/edit-configuration-maybe ()
       (interactive)
       (if (member (td/day-of-week) (number-sequence 1 5))
           (let ((hour (string-to-number (substring (current-time-string) 11 13))) )

             (if (member hour (number-sequence 9 17))
                 (org-capture nil "e")
               (td/edit-configuration)))
       (td/edit-configuration)))
   #+END_SRC

* Packages
** org
*** Add structure templates

    #+BEGIN_SRC emacs-lisp
      (dolist (item '(("e" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")
                      ("r" "#+END_SRC\n?\n#+BEGIN_SRC emacs-lisp")
                      ("p" "#+BEGIN_SRC python\n?\n#+END_SRC")))
        (add-to-list 'org-structure-template-alist item))
    #+END_SRC

*** =org-babel-execute:swift=

    #+BEGIN_SRC emacs-lisp
      (defun run-swift (body)
        "Get around `org-babel-eval' runs the swift REPL rather than the file problem"
        (let ((filename (make-temp-file "ob-swift")))
          (with-temp-file filename
            (insert body))
          (with-temp-buffer
            (shell-command (format "swift %S" (org-babel-process-file-name filename)) (current-buffer))
            (buffer-string))))

      (defun org-babel-execute:swift (body params)
        "Execute a block of Swift code with org-babel."
        (message "executing Swift source code block")
        ;; (org-babel-eval "swift" body))
        (run-swift body))

        (provide 'ob-swift)
    #+END_SRC

*** =org-babel-do-load-languages=
    Load languages

    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (swift . t)
         (python . t)
         (ruby . t)
         ;; other languages..
         ))
    #+END_SRC

** helm

*** Notes

    - SPC / for search and replace, in many files!

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-mode-fuzzy-match t
            helm-completion-in-region-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-buffers-fuzzy-matching t
            helm-candidate-number-limit 20)
    #+END_SRC

*** ripgrep

    Settings

    #+BEGIN_SRC emacs-lisp
      (setq helm-grep-ag-command "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s")
      (setq helm-grep-ag-pipe-cmd-switches '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'"))
    #+END_SRC

** magit
   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "gg" 'magit-status)
   #+END_SRC
** projectile
*** =*scratch*= buffer per project

    #+BEGIN_SRC emacs-lisp
      (defun switch-to-project-s-scratch-buffer ()
        (interactive)
        (let ((buffer-name (format "*scratch: %S*" (projectile-project-name))))
          (if-let (buffer (get-buffer buffer-name)) ; buffer exists
              (switch-to-buffer buffer)
            (progn                            ; buffer does not exist
              (switch-to-buffer (get-buffer-create buffer-name))
              (lisp-interaction-mode)
              (insert (format ";; %S\n\n" (projectile-project-name)))))))
    #+END_SRC

*** =zen=

    #+BEGIN_SRC emacs-lisp
      (defun zen ()
        (interactive)
        (delete-other-windows)
        (switch-to-project-s-scratch-buffer))
    #+END_SRC

*** Settings

    #+BEGIN_SRC emacs-lisp
      (setq projectile-enable-caching t)
      (setq projectile-switch-project-action 'zen)
    #+END_SRC

*** Discover projects
    #+BEGIN_SRC emacs-lisp
      (projectile-discover-projects-in-directory "~/work")
      (projectile-discover-projects-in-directory "~/proj")
    #+END_SRC
** Diminish modes
   #+BEGIN_SRC emacs-lisp
     (defmacro diminish-minor-mode (filename mode &optional abbrev)
       `(eval-after-load (symbol-name ,filename)
          '(diminish ,mode ,abbrev)))

     (defmacro diminish-major-mode (mode-hook abbrev)
       `(add-hook ,mode-hook
                  (lambda () (setq mode-name ,abbrev))))

     (diminish-minor-mode 'with-editor 'with-editor-mode)
     (diminish-minor-mode 'simple 'auto-fill-function)
     (diminish-minor-mode 'server 'server-buffer-clients)

     (diminish-minor-mode 'org-indent 'org-indent-mode)
     (diminish-minor-mode 'org-src    'org-src-mode)

     (diminish-major-mode 'emacs-lisp-mode-hook "elisp")
     (diminish-major-mode 'lisp-interaction-mode-hook "Î»")
     (diminish-major-mode 'python-mode-hook "Py")
   #+END_SRC
* Mappings
** Edit configurations
   #+BEGIN_SRC emacs-lisp
     (spacemacs/set-leader-keys "fee" 'td/edit-configuration-maybe)
     (spacemacs/set-leader-keys "0" 'delete-other-windows)
     (spacemacs/set-leader-keys "9" 'zen)
   #+END_SRC
* TODOs
** Auto complete in text mode
** fuzzy auto complete
** YCM style autocompletion
